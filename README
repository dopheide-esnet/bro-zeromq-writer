Bro ZeroMQ Log Writer Plugin
============================

A Bro log writer that sends logging output using ZeroMQ.

This plugin uses the ZeroMQ "publish-subscribe" pattern, where Bro is
the publisher and a user-provided program is the subscriber.

Bro publishes each log record as a ZeroMQ multi-part message containing
two parts:  the first part contains the Bro log path (e.g. "conn"), and the
second part contains the log record in JSON format.  The first message part
is needed so that the subscriber knows which type of log record is
being received, and to allow subscribing to logs based on the Bro log path.


Installation
------------

Before attempting to build this plugin, make sure you have installed
ZeroMQ (http://zeromq.org/intro:get-the-software).  This plugin should
work with any recent release of ZeroMQ.

Next, build and install this Bro plugin using the following commands
(replace BRO_SRC_DIR with the top-level directory of the Bro source code):

    # ./configure --bro-dist=BRO_SRC_DIR
    # make
    # sudo make install

Run the following command to ensure that the plugin was installed
successfully:

    # bro -N NCSA::ZeroMQWriter
    NCSA::ZeroMQWriter - ZeroMQ log writer (dynamic, version 0.1)


Logging to ZeroMQ
-----------------

In order to enable logging to ZeroMQ, add the following lines to local.bro
(change the specified hostname and port number to suitable values for
your setup):

    @load NCSA/ZeroMQWriter
    redef LogZeroMQ::zmq_hostname = "localhost";
    redef LogZeroMQ::zmq_port = 12345;
    redef LogZeroMQ::send_logs += { HTTP::LOG, DNS::LOG, Files::LOG };

After running "broctl deploy", Bro will write the logs you specified
in "LogZeroMQ::send_logs" to the specified hostname and TCP port number
using ZeroMQ.  The regular ASCII logs will also still be written as usual.

Instead of specifying which logs to send, one could instead specify which
logs to not send (all others will be sent).  To do this, just replace
"send_logs" with "excluded_log_ids":

    @load NCSA/ZeroMQWriter
    redef LogZeroMQ::zmq_hostname = "localhost";
    redef LogZeroMQ::zmq_port = 12345;
    redef LogZeroMQ::excluded_log_ids += { Conn::LOG, DNS::LOG };


Logging to Multiple Subscribers
-------------------------------

If you want to send logs to more than one subscriber, then you will need to
add log filters using the "add_filter" function, being careful to specify
values for the hostname and port (both specified as strings) in the log
filter "config" field.  In the following example, a new filter is added
to the DNS and HTTP log streams:

    @load NCSA/ZeroMQWriter
    redef LogZeroMQ::zmq_hostname = "localhost";
    redef LogZeroMQ::zmq_port = 12345;
    redef LogZeroMQ::send_logs += { HTTP::LOG, DNS::LOG, Files::LOG };

    event bro_init() &priority=-10
        {
        local remote_filter_dns: Log::Filter = [
            $name = "remote-zmq",
            $writer = Log::WRITER_ZEROMQ,
            $interv = 0 sec,
            $config = table(["hostname"] = "10.1.2.3", ["port"] = "54321")
        ];

        local remote_filter_http: Log::Filter = [
            $name = "remote-zmq",
            $writer = Log::WRITER_ZEROMQ,
            $interv = 0 sec,
            $config = table(["hostname"] = "10.1.2.3", ["port"] = "54321")
        ];

        Log::add_filter(DNS::LOG, remote_filter_dns);
        Log::add_filter(HTTP::LOG, remote_filter_http);
        }

After running "broctl deploy", Bro will write the "HTTP", "DNS", and "Files"
logs to a subscriber on the localhost, and the "HTTP" and "DNS" logs will
also be written to a subscriber on another host.

Keep in mind that when you add a log filter with the same log path as an
existing filter (this is applicable to the DNS and HTTP log streams in
this example), then Bro will append a string of the form "-N", where N is
an integer, to the end of the log path so that each filter has its own
unique log path (in the example above, the remote subscriber would see
log paths of "dns-2" and "http-2").


How to Avoid Losing Log Messages
--------------------------------

ZeroMQ will drop messages before a connection to a subscriber has been
successfully established.  This means if you start Bro before starting
a subscriber, then log records will be dropped (but will still be logged
to disk) until Bro is able to connect to the subscriber.  Therefore, in
order to avoid losing log records, it is recommended to make
sure your subscribers are running before attempting to start Bro.

Once a connection to a subscriber is established, then if it is interrupted,
ZeroMQ will queue unsent messages in memory and they will all be sent when the
connection is re-established.  The maximum number of messages that will be
queued in memory in such circumstances is called the high water mark (once
the limit is reached, messages are dropped).  The default value is 1000 but
can be changed like this:

    redef LogZeroMQ::zmq_hwm = 25000;

However, if Bro terminates before an interrupted connection is
re-established, then all unsent log records are discarded.  In order to
avoid this, make sure your subscribers are running before issuing
the BroControl "stop", "restart", or "deploy" commands.  You can control
the amount of time before unsent logs are discarded by specifying the
linger time (specified in milliseconds):

    redef LogZeroMQ::zmq_linger = 3000;

Note that increasing the value of this option will increase the time
that "broctl stop" takes to finish running.
